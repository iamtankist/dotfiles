#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Linux desktop machine with my dotfiles
# and other development preferences.
#
# Much of this script was derived from thoughtbot's now unsupported Linux
# version of Laptop.
# https://github.com/thoughtbot/laptop/tree/39768b19959f74724ed0c0ea92e5b2f6f78e45c1
################################################################################


# Thank you, thoughtbot! :)
bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n[BOOTSTRAP] $fmt\n" "$@"
}


################################################################################
# Variable declarations
################################################################################

osname=$(uname)
ruby_version="2.3.3"
OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup

DOTFILES_REPO_URL="https://github.com/iamtankist/linux-dotfiles.git"
DOTFILES_BRANCH="master"
DOTFILES_DIR=$HOME/dotfiles

BOOTSTRAP_REPO_URL="https://github.com/iamtankist/linux-bootstrap.git"
BOOTSTRAP_BRANCH="master"
BOOTSTRAP_DIR=$HOME/linux-bootstrap


################################################################################
# Make sure we're on Linux before continuing
################################################################################

if [[ "$osname" == 'Darwin' ]]; then
  bootstrap_echo "Oops, looks like you're on a Mac. Please check out the link
below for instructions on setting up macOS."
  bootstrap_echo "http://jsua.co/macos"
  exit 1
elif [[ "$osname" != 'Linux' ]]; then
  bootstrap_echo "Oops, it looks like you're using a non-supported OS. Exiting..."
  exit 1
fi


################################################################################
# 1. Update the system.
################################################################################

bootstrap_echo "Step 1: Updating system packages ..."

if command -v aptitude >/dev/null; then
  bootstrap_echo "Using aptitude ..."
else
  bootstrap_echo "Installing aptitude ..."
  sudo apt-get install -y aptitude
fi

sudo aptitude update
sudo aptitude -y upgrade


################################################################################
# 2. Install basic tools
################################################################################

bootstrap_echo "Step 2: Installing basic tools..."

bootstrap_echo "Installing build-essential..."
sudo aptitude install -y build-essential

bootstrap_echo "Installing curl ..."
sudo aptitude install -y curl

bootstrap_echo "Installing python software properties..."
sudo aptitude install -y python-software-properties

bootstrap_echo "Installing other useful libraries..."
sudo aptitude install -y zlib1g-dev libssl-dev libreadline-dev libyaml-dev libsqlite3-dev libxml2-dev libxslt1-dev libcurl4-openssl-dev libffi-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip

# http://sourcedigit.com/21550-git-2-11-released-how-to-install-git-on-ubuntu-16-10/
bootstrap_echo "Installing git..."
sudo add-apt-repository -y ppa:git-core/ppa
sudo aptitude update
sudo aptitude install -y git

bootstrap_echo "Installing Vim ..."
sudo aptitude remove vim-tiny -y
sudo aptitude install -y vim-gtk

bootstrap_echo "Installing htop..."
sudo aptitude install -y htop

bootstrap_echo "Installing tree..."
sudo aptitude install -y tree

if grep -qiE 'precise|saucy|trusty|utopic|vivid' /etc/os-release; then
  bootstrap_echo "Adding tmux ppa:pi-rho/dev..."
  sudo add-apt-repository -y ppa:pi-rho/dev
  sudo aptitude update
fi

bootstrap_echo "Installing ImageMagick..."
sudo aptitude install -y imagemagick

bootstrap_echo "Installing zsh..."
sudo aptitude install -y zsh

bootstrap_echo "Installing xclip..."
sudo aptitude install -y xclip

if grep -qiE 'precise|saucy|trusty|utopic|vivid|wheezy' /etc/os-release; then
  bootstrap_echo "Installing gnome-tweak-tool..."
  sudo aptitude install -y gnome-tweak-tool
fi

bootstrap_echo "Installing node via NVM..."
# shellcheck source=/dev/null
export NVM_DIR="$HOME"/.nvm && (
  git clone https://github.com/creationix/nvm.git "$NVM_DIR"
  cd "$NVM_DIR"
  git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" origin)"
) && . "$NVM_DIR"/nvm.sh

nvm install --lts

bootstrap_echo "Cloning linux-bootstrap repo..."
git clone "$BOOTSTRAP_REPO_URL" -b "$BOOTSTRAP_BRANCH" "$BOOTSTRAP_DIR"

################################################################################
# 3. Install oh-my-zsh
################################################################################

bootstrap_echo "Step 3: Installing oh-my-zsh..."

if [ -d "$HOME"/.oh-my-zsh ]; then
  rm -rf "$HOME"/.oh-my-zsh
fi

git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh

bootstrap_echo "Changing your shell to zsh ..."

chsh -s "$(which zsh)"


################################################################################
# 4. Setup dotfiles
################################################################################

bootstrap_echo "Step 4: Installing dotfiles..."
if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf "$OLD_DOTFILES_BACKUP"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BACKUP"
  rm -rf "$DOTFILES_DIR"
fi

bootstrap_echo "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."

git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"

# shellcheck source=/dev/null
source "$DOTFILES_DIR"/install.sh


################################################################################
# 5. Install ~/bin utilities
################################################################################

bootstrap_echo "Step 5: Installing bin utilities..."

if [ ! -d "$HOME"/bin ]; then
  mkdir "$HOME"/bin
fi

cp -R "$BOOTSTRAP_DIR"/bin/* "$HOME"/bin/


################################################################################
# 6. Install Powerline-patched fonts
################################################################################

bootstrap_echo "Step 6: Installing fixed-width fonts patched for use with Powerline symbols..."

if [ -d "$HOME"/src/fonts ]; then
  rm -rf "$HOME"/src/fonts
fi

git clone https://github.com/powerline/fonts.git "$HOME"/src/fonts

cd "$HOME"/src/fonts || exit

./install.sh

cd "$HOME" || exit

rm -rf "$HOME"/src/fonts

bootstrap_echo "Done!"

################################################################################
# 7. Installing ansible
################################################################################

bootstrap_echo "Step 7. Installin Ansible"
sudo add-apt-repository -y ppa:ansible/ansible
sudo aptitude update
sudo aptitude install -y git
sudo aptitude install -y ansible

bootstrap_echo "Done!"

################################################################################
# 7. Installing Everything Else
################################################################################

bootstrap_echo "Step 7. Install Everything Else"

# Chrome
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
sudo apt-get update 
sudo apt-get install -y google-chrome-stable

# Docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
sudo apt-get update
sudo apt-get install -y docker-ce
sudo apt-get -y install python-pip
sudo pip install docker-compose



echo ""
echo "******************************************************************"
echo "**** Bootstrap script complete! Please restart your computer. ****"
echo "******************************************************************"
echo ""
